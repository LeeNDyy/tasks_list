// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Centrifuge (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –º–æ–¥—É–ª–∏)
// import { Centrifuge } from 'centrifuge';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Centrifugo
const centrifugo = new Centrifuge('ws://localhost:8000/connection/websocket', {
  // token: "USER_TOKEN" // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
});

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const taskList = document.getElementById('task-list');
const taskForm = document.getElementById('task-form');
const titleInput = document.getElementById('title');
const descInput = document.getElementById('description');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Centrifugo
centrifugo.connect();

// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –∑–∞–¥–∞—á
const sub = centrifugo.newSubscription('tasks');

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π Centrifugo
sub.on('publication', (ctx) => {
  const event = ctx.data;
  console.log('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ:', event);
  
  switch(event.type) {
    case 'created':
      addTaskToDOM(event.task);
      break;
    case 'updated':
      updateTaskInDOM(event.task);
      break;
    case 'deleted':
      removeTaskFromDOM(event.taskId);
      break;
  }
});

sub.subscribe(); // –Ø–≤–Ω–æ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫–∞–Ω–∞–ª

// –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
document.addEventListener('DOMContentLoaded', loadTasks);

// ============== –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ============== //

// –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á
async function loadTasks() {
  try {
    const response = await fetch('/api/task');
    if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á');
    
    const tasks = await response.json();
    renderTasks(tasks);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞:', err);
    taskList.innerHTML = '<li class="error">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞—á–∏</li>';
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
async function createTask(e) {
  e.preventDefault();
  
  const title = titleInput.value.trim();
  const description = descInput.value.trim();

  if (!title) {
    showAlert('–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏', 'error');
    return;
  }

  try {
    const response = await fetch('/api/task', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ title, description })
    });

    if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏');
    
    taskForm.reset();
    showAlert('–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!', 'success');
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞:', err);
    showAlert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É', 'error');
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
async function updateTask(taskId) {
  const title = prompt('–ù–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:');
  if (!title) return;

  const description = prompt('–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:', 
    document.querySelector(`.task-item[data-id="${taskId}"] p`).textContent);

  try {
    const response = await fetch(`/api/task/${taskId}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ title, description })
    });

    if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏');
    showAlert('–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!', 'success');
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞:', err);
    showAlert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É', 'error');
  }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
async function deleteTask(taskId) {
  if (!confirm('–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É?')) return;
  
  try {
    const response = await fetch(`/api/task/${taskId}`, {
      method: 'DELETE'
    });

    if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏');
    showAlert('–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞!', 'success');
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞:', err);
    showAlert('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É', 'error');
  }
}

// ============== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ============== //

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á
function renderTasks(tasks) {
  taskList.innerHTML = '';
  
  if (tasks.length === 0) {
    taskList.innerHTML = '<li>–ù–µ—Ç –∑–∞–¥–∞—á. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é!</li>';
    return;
  }
  
  tasks.forEach(task => {
    addTaskToDOM(task);
  });
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ DOM
function addTaskToDOM(task) {
  const taskEl = document.createElement('li');
  taskEl.className = 'task-item';
  taskEl.dataset.id = task.id;
  taskEl.innerHTML = `
    <div class="task-content">
      <h3>${task.title}</h3>
      <p>${task.description}</p>
    </div>
    <div class="task-actions">
      <button class="btn-edit" onclick="updateTask(${task.id})">‚úèÔ∏è</button>
      <button class="btn-delete" onclick="deleteTask(${task.id})">üóëÔ∏è</button>
    </div>
  `;
  taskList.appendChild(taskEl);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ DOM
function updateTaskInDOM(task) {
  const taskEl = document.querySelector(`.task-item[data-id="${task.id}"]`);
  if (taskEl) {
    taskEl.querySelector('h3').textContent = task.title;
    taskEl.querySelector('p').textContent = task.description;
  }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–∑ DOM
function removeTaskFromDOM(taskId) {
  const taskEl = document.querySelector(`.task-item[data-id="${taskId}"]`);
  if (taskEl) taskEl.remove();
}

// –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
function showAlert(message, type) {
  const alert = document.createElement('div');
  alert.className = `alert alert-${type}`;
  alert.textContent = message;
  document.body.appendChild(alert);
  
  setTimeout(() => alert.remove(), 3000);
}

// ============== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π ============== //
taskForm.addEventListener('submit', createTask);

// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ HTML
window.updateTask = updateTask;
window.deleteTask = deleteTask;