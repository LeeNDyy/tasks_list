// –°–µ–ª–µ–∫—Ç–æ—Ä—ã DOM
const tasksContainer = document.getElementById("tasks");
const createBtn = document.getElementById("createTask");
const taskTitle = document.getElementById("taskTitle");
const taskDesc = document.getElementById("taskDesc");

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', loadTasks);

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á
async function loadTasks() {
    try {
        const response = await fetch('/api/task');
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á');
        
        const tasks = await response.json();
        renderTasks(tasks);
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞:", err);
        tasksContainer.innerHTML = '<div class="error">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞—á–∏</div>';
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∑–∞–¥–∞—á
function renderTasks(tasks) {
    tasksContainer.innerHTML = '';
    
    tasks.forEach(task => {
        const taskElement = document.createElement('div');
        taskElement.className = 'task';
        taskElement.dataset.id = task.id;
        taskElement.innerHTML = `
            <div class="task-header">
                <h3>#${task.id}: ${task.title}</h3>
                <div class="task-actions">
                    <button class="edit-btn" onclick="editTask(${task.id})">‚úèÔ∏è</button>
                    <button class="delete-btn" onclick="deleteTask(${task.id})">üóëÔ∏è</button>
                </div>
            </div>
            <p>${task.description}</p>
            <div class="edit-form" id="edit-form-${task.id}" style="display: none;">
                <input type="text" id="edit-title-${task.id}" value="${task.title}" required>
                <textarea id="edit-desc-${task.id}" required>${task.description}</textarea>
                <button onclick="saveTask(${task.id})">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                <button onclick="cancelEdit(${task.id})">–û—Ç–º–µ–Ω–∞</button>
            </div>
        `;
        tasksContainer.appendChild(taskElement);
    });
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
async function createTask() {
    const title = taskTitle.value.trim();
    const description = taskDesc.value.trim();
    
    if (!title) {
        alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏");
        return;
    }

    try {
        const response = await fetch('/api/task', {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({title, description})
        });
        
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏');
        
        const newTask = await response.json();
        taskTitle.value = "";
        taskDesc.value = "";
        loadTasks(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞:", err);
        alert("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É");
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏
window.editTask = function(id) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    document.querySelectorAll('.edit-form').forEach(form => {
        form.style.display = 'none';
    });
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é —Ñ–æ—Ä–º—É
    document.getElementById(`edit-form-${id}`).style.display = 'block';
};

window.cancelEdit = function(id) {
    document.getElementById(`edit-form-${id}`).style.display = 'none';
};

window.saveTask = async function(id) {
    const title = document.getElementById(`edit-title-${id}`).value.trim();
    const description = document.getElementById(`edit-desc-${id}`).value.trim();
    
    if (!title) {
        alert("–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
        return;
    }

    try {
        const response = await fetch(`/api/task/${id}`, {
            method: 'PUT',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({title, description})
        });
        
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏');
        
        loadTasks(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞:", err);
        alert("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É");
    }
};

window.deleteTask = async function(id) {
    if (!confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É?")) return;
    
    try {
        const response = await fetch(`/api/task/${id}`, {
            method: 'DELETE'
        });
        
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏');
        
        loadTasks(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞:", err);
        alert("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É");
    }
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
createBtn.addEventListener("click", createTask);
taskTitle.addEventListener("keypress", (e) => {
    if (e.key === 'Enter') createTask();
});